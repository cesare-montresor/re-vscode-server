// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: scripts.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ScriptManagerServer {

  /// <summary>Holder for reflection information generated from scripts.proto</summary>
  public static partial class ScriptsReflection {

    #region Descriptor
    /// <summary>File descriptor for scripts.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScriptsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zY3JpcHRzLnByb3RvEhNTY3JpcHRNYW5hZ2VyU2VydmVyIosBCgZTY3Jp",
            "cHQSDAoEcGF0aBgBIAEoCRIPCgdjb250ZW50GAIgASgJEjIKBnN0YXR1cxgD",
            "IAEoDjIiLlNjcmlwdE1hbmFnZXJTZXJ2ZXIuU2NyaXB0LlN0YXR1cyIuCgZT",
            "dGF0dXMSCwoHU1RPUFBFRBAAEgsKB1JVTk5JTkcQARIKCgZQQVVTRUQQAiI6",
            "CgpTY3JpcHRMaXN0EiwKB3NjcmlwdHMYASADKAsyGy5TY3JpcHRNYW5hZ2Vy",
            "U2VydmVyLlNjcmlwdCKLAQoMU2NyaXB0QWN0aW9uEgwKBHBhdGgYASABKAkS",
            "OAoGYWN0aW9uGAIgASgOMiguU2NyaXB0TWFuYWdlclNlcnZlci5TY3JpcHRB",
            "Y3Rpb24uQWN0aW9uIjMKBkFjdGlvbhIICgRQTEFZEAASCAoEU1RPUBABEgkK",
            "BVBBVVNFEAISCgoGUkVTVU1FEANCFqoCE1NjcmlwdE1hbmFnZXJTZXJ2ZXJi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ScriptManagerServer.Script), global::ScriptManagerServer.Script.Parser, new[]{ "Path", "Content", "Status" }, null, new[]{ typeof(global::ScriptManagerServer.Script.Types.Status) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ScriptManagerServer.ScriptList), global::ScriptManagerServer.ScriptList.Parser, new[]{ "Scripts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ScriptManagerServer.ScriptAction), global::ScriptManagerServer.ScriptAction.Parser, new[]{ "Path", "Action" }, null, new[]{ typeof(global::ScriptManagerServer.ScriptAction.Types.Action) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Script : pb::IMessage<Script> {
    private static readonly pb::MessageParser<Script> _parser = new pb::MessageParser<Script>(() => new Script());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Script> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ScriptManagerServer.ScriptsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script(Script other) : this() {
      path_ = other.path_;
      content_ = other.content_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script Clone() {
      return new Script(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::ScriptManagerServer.Script.Types.Status status_ = global::ScriptManagerServer.Script.Types.Status.Stopped;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ScriptManagerServer.Script.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Script);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Script other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Content != other.Content) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Status != global::ScriptManagerServer.Script.Types.Status.Stopped) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (Status != global::ScriptManagerServer.Script.Types.Status.Stopped) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Status != global::ScriptManagerServer.Script.Types.Status.Stopped) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Script other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Status != global::ScriptManagerServer.Script.Types.Status.Stopped) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::ScriptManagerServer.Script.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Script message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STOPPED")] Stopped = 0,
        [pbr::OriginalName("RUNNING")] Running = 1,
        [pbr::OriginalName("PAUSED")] Paused = 2,
      }

    }
    #endregion

  }

  public sealed partial class ScriptList : pb::IMessage<ScriptList> {
    private static readonly pb::MessageParser<ScriptList> _parser = new pb::MessageParser<ScriptList>(() => new ScriptList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScriptList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ScriptManagerServer.ScriptsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptList(ScriptList other) : this() {
      scripts_ = other.scripts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptList Clone() {
      return new ScriptList(this);
    }

    /// <summary>Field number for the "scripts" field.</summary>
    public const int ScriptsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ScriptManagerServer.Script> _repeated_scripts_codec
        = pb::FieldCodec.ForMessage(10, global::ScriptManagerServer.Script.Parser);
    private readonly pbc::RepeatedField<global::ScriptManagerServer.Script> scripts_ = new pbc::RepeatedField<global::ScriptManagerServer.Script>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ScriptManagerServer.Script> Scripts {
      get { return scripts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScriptList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScriptList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scripts_.Equals(other.scripts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scripts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scripts_.WriteTo(output, _repeated_scripts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scripts_.CalculateSize(_repeated_scripts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScriptList other) {
      if (other == null) {
        return;
      }
      scripts_.Add(other.scripts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            scripts_.AddEntriesFrom(input, _repeated_scripts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScriptAction : pb::IMessage<ScriptAction> {
    private static readonly pb::MessageParser<ScriptAction> _parser = new pb::MessageParser<ScriptAction>(() => new ScriptAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScriptAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ScriptManagerServer.ScriptsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptAction(ScriptAction other) : this() {
      path_ = other.path_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptAction Clone() {
      return new ScriptAction(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private global::ScriptManagerServer.ScriptAction.Types.Action action_ = global::ScriptManagerServer.ScriptAction.Types.Action.Play;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ScriptManagerServer.ScriptAction.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScriptAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScriptAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Action != global::ScriptManagerServer.ScriptAction.Types.Action.Play) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Action != global::ScriptManagerServer.ScriptAction.Types.Action.Play) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Action != global::ScriptManagerServer.ScriptAction.Types.Action.Play) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScriptAction other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Action != global::ScriptManagerServer.ScriptAction.Types.Action.Play) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            Action = (global::ScriptManagerServer.ScriptAction.Types.Action) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScriptAction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        [pbr::OriginalName("PLAY")] Play = 0,
        [pbr::OriginalName("STOP")] Stop = 1,
        [pbr::OriginalName("PAUSE")] Pause = 2,
        [pbr::OriginalName("RESUME")] Resume = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
